// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: rider.proto

package rider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RiderService_GetRiderInfo_FullMethodName           = "/rider.RiderService/GetRiderInfo"
	RiderService_GetTripHistory_FullMethodName         = "/rider.RiderService/GetTripHistory"
	RiderService_GetRiderPreferences_FullMethodName    = "/rider.RiderService/GetRiderPreferences"
	RiderService_UpdateRiderPreferences_FullMethodName = "/rider.RiderService/UpdateRiderPreferences"
)

// RiderServiceClient is the client API for RiderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Rider service provides rider-specific operations for trip management and instant match
type RiderServiceClient interface {
	// Gets rider information for instant match
	GetRiderInfo(ctx context.Context, in *GetRiderInfoRequest, opts ...grpc.CallOption) (*GetRiderInfoResponse, error)
	// Gets rider trip history
	GetTripHistory(ctx context.Context, in *GetTripHistoryRequest, opts ...grpc.CallOption) (*GetTripHistoryResponse, error)
	// Gets rider preferences
	GetRiderPreferences(ctx context.Context, in *GetRiderPreferencesRequest, opts ...grpc.CallOption) (*GetRiderPreferencesResponse, error)
	// Updates rider preferences
	UpdateRiderPreferences(ctx context.Context, in *UpdateRiderPreferencesRequest, opts ...grpc.CallOption) (*UpdateRiderPreferencesResponse, error)
}

type riderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiderServiceClient(cc grpc.ClientConnInterface) RiderServiceClient {
	return &riderServiceClient{cc}
}

func (c *riderServiceClient) GetRiderInfo(ctx context.Context, in *GetRiderInfoRequest, opts ...grpc.CallOption) (*GetRiderInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRiderInfoResponse)
	err := c.cc.Invoke(ctx, RiderService_GetRiderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) GetTripHistory(ctx context.Context, in *GetTripHistoryRequest, opts ...grpc.CallOption) (*GetTripHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTripHistoryResponse)
	err := c.cc.Invoke(ctx, RiderService_GetTripHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) GetRiderPreferences(ctx context.Context, in *GetRiderPreferencesRequest, opts ...grpc.CallOption) (*GetRiderPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRiderPreferencesResponse)
	err := c.cc.Invoke(ctx, RiderService_GetRiderPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) UpdateRiderPreferences(ctx context.Context, in *UpdateRiderPreferencesRequest, opts ...grpc.CallOption) (*UpdateRiderPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRiderPreferencesResponse)
	err := c.cc.Invoke(ctx, RiderService_UpdateRiderPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiderServiceServer is the server API for RiderService service.
// All implementations must embed UnimplementedRiderServiceServer
// for forward compatibility.
//
// Rider service provides rider-specific operations for trip management and instant match
type RiderServiceServer interface {
	// Gets rider information for instant match
	GetRiderInfo(context.Context, *GetRiderInfoRequest) (*GetRiderInfoResponse, error)
	// Gets rider trip history
	GetTripHistory(context.Context, *GetTripHistoryRequest) (*GetTripHistoryResponse, error)
	// Gets rider preferences
	GetRiderPreferences(context.Context, *GetRiderPreferencesRequest) (*GetRiderPreferencesResponse, error)
	// Updates rider preferences
	UpdateRiderPreferences(context.Context, *UpdateRiderPreferencesRequest) (*UpdateRiderPreferencesResponse, error)
	mustEmbedUnimplementedRiderServiceServer()
}

// UnimplementedRiderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRiderServiceServer struct{}

func (UnimplementedRiderServiceServer) GetRiderInfo(context.Context, *GetRiderInfoRequest) (*GetRiderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiderInfo not implemented")
}
func (UnimplementedRiderServiceServer) GetTripHistory(context.Context, *GetTripHistoryRequest) (*GetTripHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripHistory not implemented")
}
func (UnimplementedRiderServiceServer) GetRiderPreferences(context.Context, *GetRiderPreferencesRequest) (*GetRiderPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiderPreferences not implemented")
}
func (UnimplementedRiderServiceServer) UpdateRiderPreferences(context.Context, *UpdateRiderPreferencesRequest) (*UpdateRiderPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRiderPreferences not implemented")
}
func (UnimplementedRiderServiceServer) mustEmbedUnimplementedRiderServiceServer() {}
func (UnimplementedRiderServiceServer) testEmbeddedByValue()                      {}

// UnsafeRiderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiderServiceServer will
// result in compilation errors.
type UnsafeRiderServiceServer interface {
	mustEmbedUnimplementedRiderServiceServer()
}

func RegisterRiderServiceServer(s grpc.ServiceRegistrar, srv RiderServiceServer) {
	// If the following call pancis, it indicates UnimplementedRiderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RiderService_ServiceDesc, srv)
}

func _RiderService_GetRiderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).GetRiderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_GetRiderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).GetRiderInfo(ctx, req.(*GetRiderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_GetTripHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).GetTripHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_GetTripHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).GetTripHistory(ctx, req.(*GetTripHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_GetRiderPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiderPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).GetRiderPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_GetRiderPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).GetRiderPreferences(ctx, req.(*GetRiderPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_UpdateRiderPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRiderPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).UpdateRiderPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_UpdateRiderPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).UpdateRiderPreferences(ctx, req.(*UpdateRiderPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiderService_ServiceDesc is the grpc.ServiceDesc for RiderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rider.RiderService",
	HandlerType: (*RiderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRiderInfo",
			Handler:    _RiderService_GetRiderInfo_Handler,
		},
		{
			MethodName: "GetTripHistory",
			Handler:    _RiderService_GetTripHistory_Handler,
		},
		{
			MethodName: "GetRiderPreferences",
			Handler:    _RiderService_GetRiderPreferences_Handler,
		},
		{
			MethodName: "UpdateRiderPreferences",
			Handler:    _RiderService_UpdateRiderPreferences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rider.proto",
}
