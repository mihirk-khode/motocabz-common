// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: trip.proto

package trip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TripService_CreateTrip_FullMethodName                 = "/trip.TripService/CreateTrip"
	TripService_SubmitBidOrOffer_FullMethodName           = "/trip.TripService/SubmitBidOrOffer"
	TripService_AcceptOffer_FullMethodName                = "/trip.TripService/AcceptOffer"
	TripService_InstantAccept_FullMethodName              = "/trip.TripService/InstantAccept"
	TripService_GetTrip_FullMethodName                    = "/trip.TripService/GetTrip"
	TripService_GetActiveTrips_FullMethodName             = "/trip.TripService/GetActiveTrips"
	TripService_GetActiveTripsByRider_FullMethodName      = "/trip.TripService/GetActiveTripsByRider"
	TripService_AcceptTrip_FullMethodName                 = "/trip.TripService/AcceptTrip"
	TripService_CancelTrip_FullMethodName                 = "/trip.TripService/CancelTrip"
	TripService_CompleteTrip_FullMethodName               = "/trip.TripService/CompleteTrip"
	TripService_GetBiddingSession_FullMethodName          = "/trip.TripService/GetBiddingSession"
	TripService_GetBiddingSessionsByRider_FullMethodName  = "/trip.TripService/GetBiddingSessionsByRider"
	TripService_GetBiddingSessionsByDriver_FullMethodName = "/trip.TripService/GetBiddingSessionsByDriver"
	TripService_InstantMatch_FullMethodName               = "/trip.TripService/InstantMatch"
	TripService_GetInstantMatchStatus_FullMethodName      = "/trip.TripService/GetInstantMatchStatus"
	TripService_CancelInstantMatch_FullMethodName         = "/trip.TripService/CancelInstantMatch"
)

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	// Rider creates a new trip
	CreateTrip(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripResponse, error)
	// Automatic Bidding: drivers submit bids, lowest fare wins after countdown.
	// Flex Fare: rider/driver submit offers/counter-offers.
	// Instant Match: not used (driver accepts instantly instead).
	SubmitBidOrOffer(ctx context.Context, in *BidOrOfferRequest, opts ...grpc.CallOption) (*BidOrOfferResponse, error)
	// Flex Fare: accept a counter-offer to lock the ride.
	AcceptOffer(ctx context.Context, in *AcceptOfferRequest, opts ...grpc.CallOption) (*AcceptOfferResponse, error)
	// Instant Match: driver accepts instantly, first come first serve.
	InstantAccept(ctx context.Context, in *InstantAcceptRequest, opts ...grpc.CallOption) (*InstantAcceptResponse, error)
	// Get trip by ID
	GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*TripResponse, error)
	// Get active trips for a driver
	GetActiveTrips(ctx context.Context, in *GetActiveTripsRequest, opts ...grpc.CallOption) (*GetActiveTripsResponse, error)
	// Get active trips for a rider
	GetActiveTripsByRider(ctx context.Context, in *GetActiveTripsByRiderRequest, opts ...grpc.CallOption) (*GetActiveTripsResponse, error)
	// Accept a trip (for drivers)
	AcceptTrip(ctx context.Context, in *AcceptTripRequest, opts ...grpc.CallOption) (*AcceptTripResponse, error)
	// Cancel a trip
	CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*CancelTripResponse, error)
	// Complete a trip
	CompleteTrip(ctx context.Context, in *CompleteTripRequest, opts ...grpc.CallOption) (*CompleteTripResponse, error)
	// Get bidding session by trip ID
	GetBiddingSession(ctx context.Context, in *GetBiddingSessionRequest, opts ...grpc.CallOption) (*GetBiddingSessionResponse, error)
	// Get bidding sessions by rider ID
	GetBiddingSessionsByRider(ctx context.Context, in *GetBiddingSessionsByRiderRequest, opts ...grpc.CallOption) (*GetBiddingSessionsByRiderResponse, error)
	// Get bidding sessions by driver ID
	GetBiddingSessionsByDriver(ctx context.Context, in *GetBiddingSessionsByDriverRequest, opts ...grpc.CallOption) (*GetBiddingSessionsByDriverResponse, error)
	// Instant Match: initiate instant match request
	InstantMatch(ctx context.Context, in *InstantMatchRequest, opts ...grpc.CallOption) (*InstantMatchResponse, error)
	// Instant Match: get status of instant match request
	GetInstantMatchStatus(ctx context.Context, in *GetInstantMatchStatusRequest, opts ...grpc.CallOption) (*GetInstantMatchStatusResponse, error)
	// Instant Match: cancel instant match request
	CancelInstantMatch(ctx context.Context, in *CancelInstantMatchRequest, opts ...grpc.CallOption) (*CancelInstantMatchResponse, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) CreateTrip(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TripResponse)
	err := c.cc.Invoke(ctx, TripService_CreateTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) SubmitBidOrOffer(ctx context.Context, in *BidOrOfferRequest, opts ...grpc.CallOption) (*BidOrOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BidOrOfferResponse)
	err := c.cc.Invoke(ctx, TripService_SubmitBidOrOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) AcceptOffer(ctx context.Context, in *AcceptOfferRequest, opts ...grpc.CallOption) (*AcceptOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptOfferResponse)
	err := c.cc.Invoke(ctx, TripService_AcceptOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) InstantAccept(ctx context.Context, in *InstantAcceptRequest, opts ...grpc.CallOption) (*InstantAcceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstantAcceptResponse)
	err := c.cc.Invoke(ctx, TripService_InstantAccept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*TripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TripResponse)
	err := c.cc.Invoke(ctx, TripService_GetTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetActiveTrips(ctx context.Context, in *GetActiveTripsRequest, opts ...grpc.CallOption) (*GetActiveTripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveTripsResponse)
	err := c.cc.Invoke(ctx, TripService_GetActiveTrips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetActiveTripsByRider(ctx context.Context, in *GetActiveTripsByRiderRequest, opts ...grpc.CallOption) (*GetActiveTripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveTripsResponse)
	err := c.cc.Invoke(ctx, TripService_GetActiveTripsByRider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) AcceptTrip(ctx context.Context, in *AcceptTripRequest, opts ...grpc.CallOption) (*AcceptTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptTripResponse)
	err := c.cc.Invoke(ctx, TripService_AcceptTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*CancelTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTripResponse)
	err := c.cc.Invoke(ctx, TripService_CancelTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CompleteTrip(ctx context.Context, in *CompleteTripRequest, opts ...grpc.CallOption) (*CompleteTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteTripResponse)
	err := c.cc.Invoke(ctx, TripService_CompleteTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetBiddingSession(ctx context.Context, in *GetBiddingSessionRequest, opts ...grpc.CallOption) (*GetBiddingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBiddingSessionResponse)
	err := c.cc.Invoke(ctx, TripService_GetBiddingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetBiddingSessionsByRider(ctx context.Context, in *GetBiddingSessionsByRiderRequest, opts ...grpc.CallOption) (*GetBiddingSessionsByRiderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBiddingSessionsByRiderResponse)
	err := c.cc.Invoke(ctx, TripService_GetBiddingSessionsByRider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetBiddingSessionsByDriver(ctx context.Context, in *GetBiddingSessionsByDriverRequest, opts ...grpc.CallOption) (*GetBiddingSessionsByDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBiddingSessionsByDriverResponse)
	err := c.cc.Invoke(ctx, TripService_GetBiddingSessionsByDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) InstantMatch(ctx context.Context, in *InstantMatchRequest, opts ...grpc.CallOption) (*InstantMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstantMatchResponse)
	err := c.cc.Invoke(ctx, TripService_InstantMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetInstantMatchStatus(ctx context.Context, in *GetInstantMatchStatusRequest, opts ...grpc.CallOption) (*GetInstantMatchStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInstantMatchStatusResponse)
	err := c.cc.Invoke(ctx, TripService_GetInstantMatchStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CancelInstantMatch(ctx context.Context, in *CancelInstantMatchRequest, opts ...grpc.CallOption) (*CancelInstantMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelInstantMatchResponse)
	err := c.cc.Invoke(ctx, TripService_CancelInstantMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility.
type TripServiceServer interface {
	// Rider creates a new trip
	CreateTrip(context.Context, *TripRequest) (*TripResponse, error)
	// Automatic Bidding: drivers submit bids, lowest fare wins after countdown.
	// Flex Fare: rider/driver submit offers/counter-offers.
	// Instant Match: not used (driver accepts instantly instead).
	SubmitBidOrOffer(context.Context, *BidOrOfferRequest) (*BidOrOfferResponse, error)
	// Flex Fare: accept a counter-offer to lock the ride.
	AcceptOffer(context.Context, *AcceptOfferRequest) (*AcceptOfferResponse, error)
	// Instant Match: driver accepts instantly, first come first serve.
	InstantAccept(context.Context, *InstantAcceptRequest) (*InstantAcceptResponse, error)
	// Get trip by ID
	GetTrip(context.Context, *GetTripRequest) (*TripResponse, error)
	// Get active trips for a driver
	GetActiveTrips(context.Context, *GetActiveTripsRequest) (*GetActiveTripsResponse, error)
	// Get active trips for a rider
	GetActiveTripsByRider(context.Context, *GetActiveTripsByRiderRequest) (*GetActiveTripsResponse, error)
	// Accept a trip (for drivers)
	AcceptTrip(context.Context, *AcceptTripRequest) (*AcceptTripResponse, error)
	// Cancel a trip
	CancelTrip(context.Context, *CancelTripRequest) (*CancelTripResponse, error)
	// Complete a trip
	CompleteTrip(context.Context, *CompleteTripRequest) (*CompleteTripResponse, error)
	// Get bidding session by trip ID
	GetBiddingSession(context.Context, *GetBiddingSessionRequest) (*GetBiddingSessionResponse, error)
	// Get bidding sessions by rider ID
	GetBiddingSessionsByRider(context.Context, *GetBiddingSessionsByRiderRequest) (*GetBiddingSessionsByRiderResponse, error)
	// Get bidding sessions by driver ID
	GetBiddingSessionsByDriver(context.Context, *GetBiddingSessionsByDriverRequest) (*GetBiddingSessionsByDriverResponse, error)
	// Instant Match: initiate instant match request
	InstantMatch(context.Context, *InstantMatchRequest) (*InstantMatchResponse, error)
	// Instant Match: get status of instant match request
	GetInstantMatchStatus(context.Context, *GetInstantMatchStatusRequest) (*GetInstantMatchStatusResponse, error)
	// Instant Match: cancel instant match request
	CancelInstantMatch(context.Context, *CancelInstantMatchRequest) (*CancelInstantMatchResponse, error)
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTripServiceServer struct{}

func (UnimplementedTripServiceServer) CreateTrip(context.Context, *TripRequest) (*TripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrip not implemented")
}
func (UnimplementedTripServiceServer) SubmitBidOrOffer(context.Context, *BidOrOfferRequest) (*BidOrOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBidOrOffer not implemented")
}
func (UnimplementedTripServiceServer) AcceptOffer(context.Context, *AcceptOfferRequest) (*AcceptOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOffer not implemented")
}
func (UnimplementedTripServiceServer) InstantAccept(context.Context, *InstantAcceptRequest) (*InstantAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantAccept not implemented")
}
func (UnimplementedTripServiceServer) GetTrip(context.Context, *GetTripRequest) (*TripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrip not implemented")
}
func (UnimplementedTripServiceServer) GetActiveTrips(context.Context, *GetActiveTripsRequest) (*GetActiveTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTrips not implemented")
}
func (UnimplementedTripServiceServer) GetActiveTripsByRider(context.Context, *GetActiveTripsByRiderRequest) (*GetActiveTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTripsByRider not implemented")
}
func (UnimplementedTripServiceServer) AcceptTrip(context.Context, *AcceptTripRequest) (*AcceptTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTrip not implemented")
}
func (UnimplementedTripServiceServer) CancelTrip(context.Context, *CancelTripRequest) (*CancelTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTrip not implemented")
}
func (UnimplementedTripServiceServer) CompleteTrip(context.Context, *CompleteTripRequest) (*CompleteTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTrip not implemented")
}
func (UnimplementedTripServiceServer) GetBiddingSession(context.Context, *GetBiddingSessionRequest) (*GetBiddingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBiddingSession not implemented")
}
func (UnimplementedTripServiceServer) GetBiddingSessionsByRider(context.Context, *GetBiddingSessionsByRiderRequest) (*GetBiddingSessionsByRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBiddingSessionsByRider not implemented")
}
func (UnimplementedTripServiceServer) GetBiddingSessionsByDriver(context.Context, *GetBiddingSessionsByDriverRequest) (*GetBiddingSessionsByDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBiddingSessionsByDriver not implemented")
}
func (UnimplementedTripServiceServer) InstantMatch(context.Context, *InstantMatchRequest) (*InstantMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantMatch not implemented")
}
func (UnimplementedTripServiceServer) GetInstantMatchStatus(context.Context, *GetInstantMatchStatusRequest) (*GetInstantMatchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstantMatchStatus not implemented")
}
func (UnimplementedTripServiceServer) CancelInstantMatch(context.Context, *CancelInstantMatchRequest) (*CancelInstantMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInstantMatch not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}
func (UnimplementedTripServiceServer) testEmbeddedByValue()                     {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	// If the following call pancis, it indicates UnimplementedTripServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_CreateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CreateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CreateTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CreateTrip(ctx, req.(*TripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_SubmitBidOrOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidOrOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).SubmitBidOrOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_SubmitBidOrOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).SubmitBidOrOffer(ctx, req.(*BidOrOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_AcceptOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).AcceptOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_AcceptOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).AcceptOffer(ctx, req.(*AcceptOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_InstantAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstantAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).InstantAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_InstantAccept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).InstantAccept(ctx, req.(*InstantAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTrip(ctx, req.(*GetTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetActiveTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetActiveTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetActiveTrips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetActiveTrips(ctx, req.(*GetActiveTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetActiveTripsByRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTripsByRiderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetActiveTripsByRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetActiveTripsByRider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetActiveTripsByRider(ctx, req.(*GetActiveTripsByRiderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_AcceptTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).AcceptTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_AcceptTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).AcceptTrip(ctx, req.(*AcceptTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CancelTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CancelTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CancelTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CancelTrip(ctx, req.(*CancelTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CompleteTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CompleteTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CompleteTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CompleteTrip(ctx, req.(*CompleteTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetBiddingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBiddingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetBiddingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetBiddingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetBiddingSession(ctx, req.(*GetBiddingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetBiddingSessionsByRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBiddingSessionsByRiderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetBiddingSessionsByRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetBiddingSessionsByRider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetBiddingSessionsByRider(ctx, req.(*GetBiddingSessionsByRiderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetBiddingSessionsByDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBiddingSessionsByDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetBiddingSessionsByDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetBiddingSessionsByDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetBiddingSessionsByDriver(ctx, req.(*GetBiddingSessionsByDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_InstantMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstantMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).InstantMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_InstantMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).InstantMatch(ctx, req.(*InstantMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetInstantMatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstantMatchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetInstantMatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetInstantMatchStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetInstantMatchStatus(ctx, req.(*GetInstantMatchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CancelInstantMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInstantMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CancelInstantMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CancelInstantMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CancelInstantMatch(ctx, req.(*CancelInstantMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trip.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrip",
			Handler:    _TripService_CreateTrip_Handler,
		},
		{
			MethodName: "SubmitBidOrOffer",
			Handler:    _TripService_SubmitBidOrOffer_Handler,
		},
		{
			MethodName: "AcceptOffer",
			Handler:    _TripService_AcceptOffer_Handler,
		},
		{
			MethodName: "InstantAccept",
			Handler:    _TripService_InstantAccept_Handler,
		},
		{
			MethodName: "GetTrip",
			Handler:    _TripService_GetTrip_Handler,
		},
		{
			MethodName: "GetActiveTrips",
			Handler:    _TripService_GetActiveTrips_Handler,
		},
		{
			MethodName: "GetActiveTripsByRider",
			Handler:    _TripService_GetActiveTripsByRider_Handler,
		},
		{
			MethodName: "AcceptTrip",
			Handler:    _TripService_AcceptTrip_Handler,
		},
		{
			MethodName: "CancelTrip",
			Handler:    _TripService_CancelTrip_Handler,
		},
		{
			MethodName: "CompleteTrip",
			Handler:    _TripService_CompleteTrip_Handler,
		},
		{
			MethodName: "GetBiddingSession",
			Handler:    _TripService_GetBiddingSession_Handler,
		},
		{
			MethodName: "GetBiddingSessionsByRider",
			Handler:    _TripService_GetBiddingSessionsByRider_Handler,
		},
		{
			MethodName: "GetBiddingSessionsByDriver",
			Handler:    _TripService_GetBiddingSessionsByDriver_Handler,
		},
		{
			MethodName: "InstantMatch",
			Handler:    _TripService_InstantMatch_Handler,
		},
		{
			MethodName: "GetInstantMatchStatus",
			Handler:    _TripService_GetInstantMatchStatus_Handler,
		},
		{
			MethodName: "CancelInstantMatch",
			Handler:    _TripService_CancelInstantMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trip.proto",
}

const (
	NegotiationService_CreateNegotiationSession_FullMethodName = "/trip.NegotiationService/CreateNegotiationSession"
	NegotiationService_SubmitOffer_FullMethodName              = "/trip.NegotiationService/SubmitOffer"
	NegotiationService_RespondToOffer_FullMethodName           = "/trip.NegotiationService/RespondToOffer"
	NegotiationService_DriverRespondToCounter_FullMethodName   = "/trip.NegotiationService/DriverRespondToCounter"
	NegotiationService_GetNegotiationSession_FullMethodName    = "/trip.NegotiationService/GetNegotiationSession"
	NegotiationService_CancelNegotiation_FullMethodName        = "/trip.NegotiationService/CancelNegotiation"
)

// NegotiationServiceClient is the client API for NegotiationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Flex Fare Negotiation Service
type NegotiationServiceClient interface {
	// Start a new Flex Fare negotiation session
	CreateNegotiationSession(ctx context.Context, in *CreateNegotiationSessionRequest, opts ...grpc.CallOption) (*CreateNegotiationSessionResponse, error)
	// Submit an offer (driver or rider)
	SubmitOffer(ctx context.Context, in *SubmitOfferRequest, opts ...grpc.CallOption) (*SubmitOfferResponse, error)
	// Respond to an offer (accept, decline, counter)
	RespondToOffer(ctx context.Context, in *RespondToOfferRequest, opts ...grpc.CallOption) (*RespondToOfferResponse, error)
	// Driver responds to rider's counter-offer
	DriverRespondToCounter(ctx context.Context, in *DriverRespondToCounterRequest, opts ...grpc.CallOption) (*DriverRespondToCounterResponse, error)
	// Get negotiation session details
	GetNegotiationSession(ctx context.Context, in *GetNegotiationSessionRequest, opts ...grpc.CallOption) (*GetNegotiationSessionResponse, error)
	// Cancel negotiation session
	CancelNegotiation(ctx context.Context, in *CancelNegotiationRequest, opts ...grpc.CallOption) (*CancelNegotiationResponse, error)
}

type negotiationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNegotiationServiceClient(cc grpc.ClientConnInterface) NegotiationServiceClient {
	return &negotiationServiceClient{cc}
}

func (c *negotiationServiceClient) CreateNegotiationSession(ctx context.Context, in *CreateNegotiationSessionRequest, opts ...grpc.CallOption) (*CreateNegotiationSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNegotiationSessionResponse)
	err := c.cc.Invoke(ctx, NegotiationService_CreateNegotiationSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *negotiationServiceClient) SubmitOffer(ctx context.Context, in *SubmitOfferRequest, opts ...grpc.CallOption) (*SubmitOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitOfferResponse)
	err := c.cc.Invoke(ctx, NegotiationService_SubmitOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *negotiationServiceClient) RespondToOffer(ctx context.Context, in *RespondToOfferRequest, opts ...grpc.CallOption) (*RespondToOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondToOfferResponse)
	err := c.cc.Invoke(ctx, NegotiationService_RespondToOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *negotiationServiceClient) DriverRespondToCounter(ctx context.Context, in *DriverRespondToCounterRequest, opts ...grpc.CallOption) (*DriverRespondToCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverRespondToCounterResponse)
	err := c.cc.Invoke(ctx, NegotiationService_DriverRespondToCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *negotiationServiceClient) GetNegotiationSession(ctx context.Context, in *GetNegotiationSessionRequest, opts ...grpc.CallOption) (*GetNegotiationSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNegotiationSessionResponse)
	err := c.cc.Invoke(ctx, NegotiationService_GetNegotiationSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *negotiationServiceClient) CancelNegotiation(ctx context.Context, in *CancelNegotiationRequest, opts ...grpc.CallOption) (*CancelNegotiationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelNegotiationResponse)
	err := c.cc.Invoke(ctx, NegotiationService_CancelNegotiation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NegotiationServiceServer is the server API for NegotiationService service.
// All implementations must embed UnimplementedNegotiationServiceServer
// for forward compatibility.
//
// Flex Fare Negotiation Service
type NegotiationServiceServer interface {
	// Start a new Flex Fare negotiation session
	CreateNegotiationSession(context.Context, *CreateNegotiationSessionRequest) (*CreateNegotiationSessionResponse, error)
	// Submit an offer (driver or rider)
	SubmitOffer(context.Context, *SubmitOfferRequest) (*SubmitOfferResponse, error)
	// Respond to an offer (accept, decline, counter)
	RespondToOffer(context.Context, *RespondToOfferRequest) (*RespondToOfferResponse, error)
	// Driver responds to rider's counter-offer
	DriverRespondToCounter(context.Context, *DriverRespondToCounterRequest) (*DriverRespondToCounterResponse, error)
	// Get negotiation session details
	GetNegotiationSession(context.Context, *GetNegotiationSessionRequest) (*GetNegotiationSessionResponse, error)
	// Cancel negotiation session
	CancelNegotiation(context.Context, *CancelNegotiationRequest) (*CancelNegotiationResponse, error)
	mustEmbedUnimplementedNegotiationServiceServer()
}

// UnimplementedNegotiationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNegotiationServiceServer struct{}

func (UnimplementedNegotiationServiceServer) CreateNegotiationSession(context.Context, *CreateNegotiationSessionRequest) (*CreateNegotiationSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNegotiationSession not implemented")
}
func (UnimplementedNegotiationServiceServer) SubmitOffer(context.Context, *SubmitOfferRequest) (*SubmitOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOffer not implemented")
}
func (UnimplementedNegotiationServiceServer) RespondToOffer(context.Context, *RespondToOfferRequest) (*RespondToOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondToOffer not implemented")
}
func (UnimplementedNegotiationServiceServer) DriverRespondToCounter(context.Context, *DriverRespondToCounterRequest) (*DriverRespondToCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverRespondToCounter not implemented")
}
func (UnimplementedNegotiationServiceServer) GetNegotiationSession(context.Context, *GetNegotiationSessionRequest) (*GetNegotiationSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNegotiationSession not implemented")
}
func (UnimplementedNegotiationServiceServer) CancelNegotiation(context.Context, *CancelNegotiationRequest) (*CancelNegotiationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNegotiation not implemented")
}
func (UnimplementedNegotiationServiceServer) mustEmbedUnimplementedNegotiationServiceServer() {}
func (UnimplementedNegotiationServiceServer) testEmbeddedByValue()                            {}

// UnsafeNegotiationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NegotiationServiceServer will
// result in compilation errors.
type UnsafeNegotiationServiceServer interface {
	mustEmbedUnimplementedNegotiationServiceServer()
}

func RegisterNegotiationServiceServer(s grpc.ServiceRegistrar, srv NegotiationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNegotiationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NegotiationService_ServiceDesc, srv)
}

func _NegotiationService_CreateNegotiationSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNegotiationSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NegotiationServiceServer).CreateNegotiationSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NegotiationService_CreateNegotiationSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NegotiationServiceServer).CreateNegotiationSession(ctx, req.(*CreateNegotiationSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NegotiationService_SubmitOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NegotiationServiceServer).SubmitOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NegotiationService_SubmitOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NegotiationServiceServer).SubmitOffer(ctx, req.(*SubmitOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NegotiationService_RespondToOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondToOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NegotiationServiceServer).RespondToOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NegotiationService_RespondToOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NegotiationServiceServer).RespondToOffer(ctx, req.(*RespondToOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NegotiationService_DriverRespondToCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverRespondToCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NegotiationServiceServer).DriverRespondToCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NegotiationService_DriverRespondToCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NegotiationServiceServer).DriverRespondToCounter(ctx, req.(*DriverRespondToCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NegotiationService_GetNegotiationSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNegotiationSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NegotiationServiceServer).GetNegotiationSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NegotiationService_GetNegotiationSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NegotiationServiceServer).GetNegotiationSession(ctx, req.(*GetNegotiationSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NegotiationService_CancelNegotiation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelNegotiationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NegotiationServiceServer).CancelNegotiation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NegotiationService_CancelNegotiation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NegotiationServiceServer).CancelNegotiation(ctx, req.(*CancelNegotiationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NegotiationService_ServiceDesc is the grpc.ServiceDesc for NegotiationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NegotiationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trip.NegotiationService",
	HandlerType: (*NegotiationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNegotiationSession",
			Handler:    _NegotiationService_CreateNegotiationSession_Handler,
		},
		{
			MethodName: "SubmitOffer",
			Handler:    _NegotiationService_SubmitOffer_Handler,
		},
		{
			MethodName: "RespondToOffer",
			Handler:    _NegotiationService_RespondToOffer_Handler,
		},
		{
			MethodName: "DriverRespondToCounter",
			Handler:    _NegotiationService_DriverRespondToCounter_Handler,
		},
		{
			MethodName: "GetNegotiationSession",
			Handler:    _NegotiationService_GetNegotiationSession_Handler,
		},
		{
			MethodName: "CancelNegotiation",
			Handler:    _NegotiationService_CancelNegotiation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trip.proto",
}
